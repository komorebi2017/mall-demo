<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         id="WebApp_ID" version="2.5">

    <display-name>Archetype Created Web Application</display-name>

    <!--过滤器，为了转码用的-->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern><!--所有的强求都会拦截，走CharacterEncodingFilter，直接转Utf8-->
    </filter-mapping>

    <filter>
        <filter-name>contextFilter</filter-name>
        <filter-class>com.mall.util.ServerUtil</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>contextFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!--监听器，实现了ServletRequestListener，只负责监听Web容器的启动和关闭的时间-->
    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>

    <!--ContextLoaderListener：将Web容器和Spring容器整合的监听器-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <!--ContextLoaderListener通过applicationContext.xml将Web容器和Spring容器整合-->
        <!--通过ContextLoaderListener来加载applicationContext.xml-->
        <param-value>
            classpath:applicationContext.xml
        </param-value>
    </context-param>

    <!--SpringMVC的配置-->
    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup><!--一个servlet的配置，当配置为>=0时，容器启动时会初始化这个servlet
        也就是DispatcherServlet，调用它的init方法；当<0或不指定时，只有当这个servlet被选择使用时才会加载-->
    </servlet>


    <!--*.do的请求都会被SpringMVC拦截-->
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>

    <session-config>

        <session-timeout>30</session-timeout>

    </session-config>

</web-app>

